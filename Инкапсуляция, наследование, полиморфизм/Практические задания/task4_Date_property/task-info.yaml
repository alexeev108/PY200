type: theory
files:
  - name: main.py
    visible: true
    placeholders:
      - offset: 1595
        length: 88
        placeholder_text: |-
          # TODO какой декоратор следует применить?
              def is_leap_year(self, year: int) -> bool:
        initial_state:
          length: 88
          offset: 424
        initialized_from_dependency: false
        encrypted_possible_answer: |-
          @staticmethod
              def is_leap_year(year: int) -> bool:
        selected: false
        status: Solved
        is_visible: false
      - offset: 1744
        length: 54
        placeholder_text: "...  # TODO записать условие проверки високосного года"
        initial_state:
          length: 54
          offset: 573
        initialized_from_dependency: false
        encrypted_possible_answer: |-
          leap_condition = ((year % 4) == 0 and (year % 100) != 0) or ((year % 400) == 0)
                  return leap_condition
        selected: false
        status: Solved
        is_visible: false
      - offset: 1948
        length: 53
        placeholder_text: "...  # TODO вернуть количество дней указанного месяца"
        initial_state:
          length: 53
          offset: 777
        initialized_from_dependency: false
        encrypted_possible_answer: |-
          year_months_index = 0 if not self.is_leap_year(year) else 1
                  year_months = self.DAY_OF_MONTH[year_months_index]
          
                  return year_months[month-1]
        selected: false
        status: Solved
        is_visible: false
      - offset: 2134
        length: 88
        placeholder_text: "...  # TODO если указанный набор день, месяц и год неверны\
      , то вызвать ошибку ValueError"
        initial_state:
          length: 88
          offset: 963
        initialized_from_dependency: false
        encrypted_possible_answer: |-
          if day > self.get_max_day(month, year):
                      raise ValueError
        selected: false
        status: Solved
        is_visible: false
      - offset: 2228
        length: 39
        placeholder_text: '# TODO записать getter и setter для дня'
        initial_state:
          length: 39
          offset: 1057
        initialized_from_dependency: false
        encrypted_possible_answer: |-
          @property
              def day(self) -> int:
                  return self._day
          
              @day.setter
              def day(self, day: int) -> None:
                  if not isinstance(day, int):
                      raise TypeError
                  if not 1 <= day <= 31:
                      raise ValueError
                  self._day = day
        selected: false
        status: Solved
        is_visible: false
      - offset: 2273
        length: 42
        placeholder_text: '# TODO записать getter и setter для месяца'
        initial_state:
          length: 42
          offset: 1102
        initialized_from_dependency: false
        encrypted_possible_answer: |-
          @property
              def month(self) -> int:
                  return self._month
          
              @month.setter
              def month(self, month: int) -> None:
                  if not isinstance(month, int):
                      raise TypeError
                  if not 1 <= month <= 12:
                      raise ValueError
                  self._month = month
        selected: false
        status: Solved
        is_visible: false
      - offset: 2321
        length: 40
        placeholder_text: '# TODO записать getter и setter для года'
        initial_state:
          length: 40
          offset: 1150
        initialized_from_dependency: false
        encrypted_possible_answer: |-
          @property
              def year(self) -> int:
                  return self._year
          
              @year.setter
              def year(self, year: int) -> None:
                  if not isinstance(year, int):
                      raise TypeError
                  if year <= 0:
                      raise ValueError
                  self._year = year
        selected: false
        status: Solved
        is_visible: false
    learner_created: false
  - name: __init__.py
    visible: false
    learner_created: false
status: Solved
record: -1
post_submission_on_open: true
